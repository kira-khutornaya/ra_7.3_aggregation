{"version":3,"sources":["components/withAggregation.js","components/MonthTable.js","components/YearTable.js","components/SortTable.js","App.js","reportWebVitals.js","index.js"],"names":["withAggregation","WrappedComponent","group","formatType","data","reduce","acc","cur","index","findIndex","el","get","date","push","amount","keyFormat","map","format","sort","a","b","diff","momentData","this","props","list","moment","groupedData","groupData","sortedData","sortData","formattedData","formatData","React","Component","MonthTable","item","month","nanoid","defaultProps","YearTable","year","SortTable","MonthTableWithAggregation","YearTableWithAggregation","SortTableWithAggregation","App","state","getData","fetch","process","then","res","json","setState","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3be59dc.chunk.js","sourcesContent":["/* eslint react/prop-types: 0 */\n/* eslint class-methods-use-this: [\n  \"error\",\n  { \"exceptMethods\": [\"groupData\", \"formatData\", \"sortData\"] }\n] */\n\nimport React from 'react';\nimport moment from 'moment';\n\nexport default function withAggregation(WrappedComponent, group, formatType) {\n  return class extends React.Component {\n    groupData(data) {\n      return data.reduce((acc, cur) => {\n        const index = acc.findIndex((el) => el[group].get(group) === cur.date.get(group));\n\n        if (index === -1) {\n          acc.push({\n            [group]: cur.date,\n            amount: cur.amount,\n          });\n        } else {\n          acc[index].amount += cur.amount;\n        }\n\n        return acc;\n      }, []);\n    }\n\n    formatData(data) {\n      const keyFormat = group || 'date';\n\n      return data.map((el) => ({\n        ...el,\n        [keyFormat]: el[keyFormat].format(formatType),\n      }));\n    }\n\n    sortData(data) {\n      if (group) {\n        return data.sort((a, b) => b[group].get(group) - a[group].get(group));\n      }\n\n      return data.sort((a, b) => b.date.diff(a.date));\n    }\n\n    render() {\n      const { list } = this.props;\n      const momentData = list.map((el) => ({ ...el, date: moment(el.date) }));\n      let groupedData = momentData;\n\n      if (group) groupedData = this.groupData(momentData);\n\n      const sortedData = this.sortData(groupedData);\n      const formattedData = this.formatData(sortedData);\n\n      return <WrappedComponent {...this.props} list={formattedData} />;\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nfunction MonthTable({ list }) {\n  return (\n    <div>\n      <h2>Month Table</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Month</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          {list.map((item) => (\n            <tr key={nanoid()}>\n              <td>{item.month}</td>\n              <td>{item.amount}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nMonthTable.defaultProps = {\n  list: [],\n};\n\nMonthTable.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.exact({\n    month: PropTypes.string.isRequired,\n    amount: PropTypes.number.isRequired,\n  })),\n};\n\nexport default MonthTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nfunction YearTable({ list }) {\n  return (\n    <div>\n      <h2>Year Table</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Year</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          {list.map((item) => (\n            <tr key={nanoid()}>\n              <td>{item.year}</td>\n              <td>{item.amount}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nYearTable.defaultProps = {\n  list: [],\n};\n\nYearTable.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.exact({\n    year: PropTypes.string.isRequired,\n    amount: PropTypes.number.isRequired,\n  })),\n};\n\nexport default YearTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nfunction SortTable({ list }) {\n  return (\n    <div>\n      <h2>Sort Table</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n          {list.map((item) => (\n            <tr key={nanoid()}>\n              <td>{item.date}</td>\n              <td>{item.amount}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nSortTable.defaultProps = {\n  list: [],\n};\n\nSortTable.propTypes = {\n  list: PropTypes.arrayOf(PropTypes.exact({\n    date: PropTypes.string.isRequired,\n    amount: PropTypes.number.isRequired,\n  })),\n};\n\nexport default SortTable;\n","import React, { Component } from 'react';\nimport './App.css';\nimport withAggregation from './components/withAggregation';\nimport MonthTable from './components/MonthTable';\nimport YearTable from './components/YearTable';\nimport SortTable from './components/SortTable';\n\nconst MonthTableWithAggregation = withAggregation(MonthTable, 'month', 'MMM');\nconst YearTableWithAggregation = withAggregation(YearTable, 'year', 'YYYY');\nconst SortTableWithAggregation = withAggregation(SortTable, '', 'YYYY-MM-DD');\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  getData() {\n    fetch(process.env.REACT_APP_DATA_URL)\n      .then((res) => res.json())\n      .then((json) => this.setState(json));\n  }\n\n  render() {\n    const { list } = this.state;\n\n    return (\n      <div id=\"app\">\n        <MonthTableWithAggregation list={list} />\n        <YearTableWithAggregation list={list} />\n        <SortTableWithAggregation list={list} />\n      </div>\n    );\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}